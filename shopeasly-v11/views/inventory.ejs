<% layout('layout') %>

<div class="page-container">

<section class="dashboard-card" style="display:flex; align-items:center; justify-content:space-between; gap:1rem;">
  <div>
    <h1>Inventory</h1>
    <p style="color: var(--text-secondary); margin-top: 0.25rem;">Track stock levels, SKUs, and product availability</p>
  </div>
  <div class="header-actions">
    <button class="btn btn-secondary" onclick="location.reload()">‚Üª Refresh</button>
    <button class="btn btn-secondary" onclick="openSpreadsheetModal()">üì• Upload Spreadsheet</button>
    <button class="btn btn-secondary" onclick="openBulkProductModal()">üìä Bulk Create</button>
    <button class="btn btn-secondary" onclick="openAIHelpModal()">üß† AI Help</button>
    <button class="btn btn-primary" onclick="openProductModal('add')">Ôºã New Product</button>
  </div>
</section>

<style>
  /* Minimal styles for inventory tabs */
  .tab-bar { display:flex; gap:.5rem; align-items:center; flex-wrap:wrap; }
  .tab-btn { padding:.45rem .8rem; border:1px solid var(--border); background:var(--surface); border-radius:8px; cursor:pointer; }
  .tab-btn.active { background: var(--primary-weak, rgba(99,102,241,.12)); border-color: var(--primary); color: var(--primary-strong, var(--primary)); }
  .metric-card { cursor: pointer; }
  #inventory-list.table-wrapper, #materials-list.table-wrapper, #packing-list.table-wrapper { overflow:auto; }
  @media (max-width: 900px) { .tab-bar { width:100%; } }
</style>

<div class="dashboard-grid">
  <div class="dashboard-card">
    <div class="card-header">
      <h3 class="card-title">Overview</h3>
    </div>
    <div class="card-body">
      <div class="stats-grid">
        <div class="metric-card" onclick="setFilter('all')" title="Show all">
          <div class="metric-label">Total SKUs</div>
          <div class="metric-value" id="metric-total-skus">‚Äî</div>
        </div>
        <div class="metric-card" onclick="setFilter('low')" title="Show low stock">
          <div class="metric-label">Low Stock</div>
          <div class="metric-value" id="metric-low-stock">‚Äî</div>
        </div>
        <div class="metric-card" onclick="setFilter('out')" title="Show out of stock">
          <div class="metric-label">Out of Stock</div>
          <div class="metric-value" id="metric-out-of-stock">‚Äî</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Inventory Alerts (global) -->
  <div class="dashboard-card" style="grid-column: 1 / -1;">
    <div class="card-header">
      <h3 class="card-title">Inventory Alerts</h3>
    </div>
    <div class="card-body">
      <div id="inv-alerts" class="alerts-container" aria-live="polite"></div>
    </div>
  </div>

  <div class="dashboard-card" id="products-panel" style="grid-column: 1 / -1;">
    <div class="card-header">
      <div style="display:flex; align-items:center; gap:.75rem; flex-wrap:wrap;">
        <h3 class="card-title">Products</h3>
        <div class="tab-bar" role="tablist" aria-label="Inventory Sections">
          <button class="tab-btn active" role="tab" aria-selected="true" id="tab-products" onclick="setActiveTab('products')">Products</button>
          <button class="tab-btn" role="tab" aria-selected="false" id="tab-materials" onclick="setActiveTab('materials')">Materials</button>
          <button class="tab-btn" role="tab" aria-selected="false" id="tab-packing" onclick="setActiveTab('packing')">Packing</button>
        </div>
      </div>
      <div class="card-actions">
        <input id="inventory-search" type="search" class="form-input" style="max-width: 280px;" placeholder="Search..." oninput="renderList()">
      </div>
    </div>
    <div class="card-body">
      <div id="inventory-empty" class="empty-state">
        <div class="empty-icon">üì¶</div>
  <h4>No products yet</h4>
  <p style="color: var(--text-secondary);">Create products and link them to materials and packaging.</p>
  <button class="btn btn-primary" onclick="openProductModal('add')">Add your first product</button>
      </div>
      <div id="inventory-list" class="table-wrapper" style="display:none;">
        <table>
          <thead>
            <tr>
              <th>Product</th>
              <th>SKU</th>

              <th>Stock</th>
              <th>Price</th>
              <th>Status</th>
              <th class="actions-cell">Actions</th>
            </tr>
          </thead>
          <tbody id="inventory-tbody"></tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Materials Section -->
  <div class="dashboard-card" id="materials-panel" style="grid-column: 1 / -1; display:none;">
    <div class="card-header">
      <h3 class="card-title">Materials</h3>
      <div class="card-actions">
  <button class="btn btn-secondary" onclick="openMaterialModal('add')">Ôºã New Material</button>
      </div>
    </div>
    <div class="card-body">
      <div id="materials-empty" class="empty-state" style="display:none;">
        <div class="empty-icon">üß™</div>
        <h4>No materials yet</h4>
        <p style="color: var(--text-secondary);">Track inks, film, vinyl, blanks, and other production inputs.</p>
      </div>
      <div id="materials-list" class="table-wrapper" style="display:none;">
        <table>
          <thead>
            <tr>
              <th>Material</th>
              <th>SKU</th>
              <th>Stock</th>
              <th>Price</th>
              <th>Status</th>
              <th class="actions-cell">Actions</th>
            </tr>
          </thead>
          <tbody id="materials-tbody"></tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Packing Materials Section -->
  <div class="dashboard-card" id="packing-panel" style="grid-column: 1 / -1; display:none;">
    <div class="card-header">
      <h3 class="card-title">Packing Materials</h3>
      <div class="card-actions">
  <button class="btn btn-secondary" onclick="openPackingModal('add')">Ôºã New Packing Material</button>
      </div>
    </div>
    <div class="card-body">
      <div id="packing-empty" class="empty-state" style="display:none;">
        <div class="empty-icon">üì¶</div>
        <h4>No packing materials yet</h4>
        <p style="color: var(--text-secondary);">Boxes, mailers, bubble wrap, tape, labels, and shipping supplies.</p>
      </div>
      <div id="packing-list" class="table-wrapper" style="display:none;">
        <table>
          <thead>
            <tr>
              <th>Item</th>
              <th>SKU</th>
              <th>Stock</th>
              <th>Price</th>
              <th>Status</th>
              <th class="actions-cell">Actions</th>
            </tr>
          </thead>
          <tbody id="packing-tbody"></tbody>
        </table>
      </div>
    </div>
  </div>
</div>

</div>

<!-- Bulk Product Creation Modal -->
<div id="bulk-product-modal" class="modal-overlay hidden" aria-hidden="true">
  <div class="modal-content" role="dialog" aria-labelledby="bulk-product-modal-title" style="max-width: 800px; width: 95%;">
    <button class="modal-close-btn" onclick="closeBulkProductModal()" aria-label="Close">‚úï</button>
    <h2 id="bulk-product-modal-title">Bulk Product Creation</h2>
    
    <div class="bulk-creation-tabs">
      <div class="tab-headers">
        <button class="tab-header active" data-tab="csv">üìÑ CSV Import</button>
        <button class="tab-header" data-tab="template">üè∑Ô∏è Template-Based</button>
        <button class="tab-header" data-tab="ai-generate">ü§ñ AI Generate</button>
      </div>
      
      <!-- CSV Import Tab -->
      <div class="tab-content active" data-tab="csv">
        <div class="tab-section">
          <h3>Import from CSV</h3>
          <p class="text-muted">Upload a CSV file with product information to create multiple products at once.</p>
          
          <div class="form-group">
            <label for="bulk-csv-file">Select CSV File</label>
            <input type="file" id="bulk-csv-file" accept=".csv" class="form-input" />
          </div>
          
          <div class="csv-template-section">
            <h4>Expected CSV Format</h4>
            <div class="csv-preview">
              <table class="csv-example">
                <thead>
                  <tr>
                    <th>name</th>
                    <th>price</th>
                    <th>stock</th>
                    <th>category</th>
                    <th>description</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>Cool Space T-Shirt</td>
                    <td>25.99</td>
                    <td>50</td>
                    <td>Apparel</td>
                    <td>Retro space design</td>
                  </tr>
                  <tr>
                    <td>Galaxy Mug</td>
                    <td>12.99</td>
                    <td>25</td>
                    <td>Drinkware</td>
                    <td>11oz ceramic mug</td>
                  </tr>
                </tbody>
              </table>
            </div>
            <button class="btn btn-secondary btn-sm" onclick="downloadCsvTemplate()">üì• Download Template</button>
          </div>
          
          <div id="csv-preview-section" style="display: none;">
            <h4>Preview</h4>
            <div id="csv-preview-content"></div>
          </div>
          
          <div class="form-actions">
            <button class="btn btn-secondary" onclick="closeBulkProductModal()">Cancel</button>
            <button class="btn btn-primary" id="import-csv-btn" onclick="importFromCsv()" disabled>Import Products</button>
          </div>
        </div>
      </div>
      
      <!-- Template-Based Tab -->
      <div class="tab-content" data-tab="template">
        <div class="tab-section">
          <h3>Template-Based Creation</h3>
          <p class="text-muted">Use predefined templates to quickly create similar products with variations.</p>
          
          <div class="template-selection">
            <h4>Choose Template</h4>
            <div class="template-grid">
              <div class="template-card" data-template="apparel">
                <div class="template-icon">üëï</div>
                <h5>Apparel</h5>
                <p>T-shirts, hoodies, etc.</p>
              </div>
              <div class="template-card" data-template="drinkware">
                <div class="template-icon">‚òï</div>
                <h5>Drinkware</h5>
                <p>Mugs, tumblers, bottles</p>
              </div>
              <div class="template-card" data-template="prints">
                <div class="template-icon">üñºÔ∏è</div>
                <h5>Prints</h5>
                <p>Posters, canvases, stickers</p>
              </div>
              <div class="template-card" data-template="accessories">
                <div class="template-icon">üëú</div>
                <h5>Accessories</h5>
                <p>Bags, phone cases, etc.</p>
              </div>
            </div>
          </div>
          
          <div id="template-form" style="display: none;">
            <h4>Template Configuration</h4>
            <form id="bulk-template-form">
              <div class="form-row">
                <div class="form-group">
                  <label for="template-base-name">Base Product Name</label>
                  <input id="template-base-name" class="form-input" type="text" placeholder="e.g., Cool Space Design" required>
                </div>
                <div class="form-group">
                  <label for="template-base-price">Base Price</label>
                  <input id="template-base-price" class="form-input" type="number" step="0.01" placeholder="0.00" required>
                </div>
              </div>
              
              <div class="variation-section">
                <h5>Create Variations</h5>
                <div class="checkbox-group">
                  <label class="checkbox-label">
                    <input type="checkbox" id="create-sizes"> Create size variations (S, M, L, XL)
                  </label>
                  <label class="checkbox-label">
                    <input type="checkbox" id="create-colors"> Create color variations
                  </label>
                </div>
                
                <div id="color-options" style="display: none;">
                  <label>Colors (comma-separated):</label>
                  <input type="text" id="template-colors" class="form-input" placeholder="Black, White, Navy, Red" />
                </div>
              </div>
              
              <div class="form-group">
                <label for="template-stock">Stock per variation</label>
                <input id="template-stock" class="form-input" type="number" value="10" min="0">
              </div>
            </form>
            
            <div class="preview-section">
              <h5>Preview Products to Create</h5>
              <div id="template-preview"></div>
            </div>
            
            <div class="form-actions">
              <button class="btn btn-secondary" onclick="resetTemplateForm()">Reset</button>
              <button class="btn btn-primary" onclick="createFromTemplate()">Create Products</button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- AI Generate Tab -->
      <div class="tab-content" data-tab="ai-generate">
        <div class="tab-section">
          <h3>AI Product Generation</h3>
          <p class="text-muted">Let AI generate product ideas and variations based on your criteria.</p>
          
          <form id="ai-generation-form">
            <div class="form-group">
              <label for="ai-theme">Theme/Style</label>
              <input id="ai-theme" class="form-input" type="text" placeholder="e.g., vintage space, minimalist nature, retro gaming" required>
            </div>
            
            <div class="form-row">
              <div class="form-group">
                <label for="ai-product-types">Product Types</label>
                <select id="ai-product-types" class="form-input" multiple>
                  <option value="t-shirt">T-Shirts</option>
                  <option value="hoodie">Hoodies</option>
                  <option value="mug">Mugs</option>
                  <option value="sticker">Stickers</option>
                  <option value="poster">Posters</option>
                  <option value="phone-case">Phone Cases</option>
                </select>
              </div>
              <div class="form-group">
                <label for="ai-quantity">How many products?</label>
                <input id="ai-quantity" class="form-input" type="number" value="5" min="1" max="20">
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group">
                <label for="ai-price-range">Price Range</label>
                <select id="ai-price-range" class="form-input">
                  <option value="budget">Budget ($5-15)</option>
                  <option value="mid">Mid-range ($15-35)</option>
                  <option value="premium">Premium ($35-75)</option>
                  <option value="luxury">Luxury ($75+)</option>
                </select>
              </div>
              <div class="form-group">
                <label for="ai-target-audience">Target Audience</label>
                <input id="ai-target-audience" class="form-input" type="text" placeholder="e.g., young adults, gamers, coffee lovers">
              </div>
            </div>
            
            <div class="checkbox-group">
              <label class="checkbox-label">
                <input type="checkbox" id="ai-generate-images"> Generate product images with AI
              </label>
              <label class="checkbox-label">
                <input type="checkbox" id="ai-create-variations"> Create size/color variations
              </label>
            </div>
          </form>
          
          <div class="form-actions">
            <button class="btn btn-secondary" onclick="closeBulkProductModal()">Cancel</button>
            <button class="btn btn-primary" onclick="generateWithAI()">ü§ñ Generate Products</button>
          </div>
          
          <div id="ai-generation-results" style="display: none;">
            <h4>Generated Products</h4>
            <div id="ai-generated-list"></div>
            <div class="form-actions">
              <button class="btn btn-secondary" onclick="regenerateAI()">üîÑ Regenerate</button>
              <button class="btn btn-primary" onclick="createAIProducts()">‚úÖ Create All Products</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Upload Spreadsheet Modal -->
<div id="spreadsheet-modal" class="modal-overlay hidden" aria-hidden="true">
  <div class="modal-content" role="dialog" aria-labelledby="spreadsheet-modal-title" style="max-width: 860px; width: 95%;">
    <button class="modal-close-btn" onclick="closeSpreadsheetModal()" aria-label="Close">‚úï</button>
    <h2 id="spreadsheet-modal-title">Upload Inventory Spreadsheet</h2>
    <p class="text-muted">CSV, XLSX, or XLS. Auto-maps: name, sku, price, stock, category, threshold, description.</p>
    <div class="form-group">
      <input type="file" id="spreadsheet-file" accept=".csv,.xlsx,.xls" class="form-input" />
    </div>
    <div id="mapping-summary" class="text-muted" style="margin:.5rem 0 1rem 0;"></div>
    <div id="spreadsheet-preview" class="table-wrapper" style="max-height:300px; overflow:auto; display:none;"></div>
    <div class="form-actions">
      <button class="btn btn-secondary" onclick="downloadProductTemplate()">Download Template</button>
      <button class="btn btn-secondary" onclick="closeSpreadsheetModal()">Cancel</button>
      <button id="spreadsheet-import-btn" class="btn btn-primary" onclick="importSpreadsheet()" disabled>Import</button>
    </div>
  </div>
  <script src="https://unpkg.com/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
</div>

<!-- AI Help Modal -->
<div id="ai-help-modal" class="modal-overlay hidden" aria-hidden="true">
  <div class="modal-content" role="dialog" aria-labelledby="ai-help-title" style="max-width: 720px; width:95%;">
    <button class="modal-close-btn" onclick="closeAIHelpModal()" aria-label="Close">‚úï</button>
    <h2 id="ai-help-title">Easly AI Help</h2>
    <div class="form-group">
      <label for="ai-help-input">Ask about inventory</label>
      <input id="ai-help-input" class="form-input" type="text" placeholder="e.g., show low stock mugs; create product SKU TEE-PRM-BLK-S stock 12"/>
    </div>
    <div class="form-actions">
      <button class="btn btn-secondary" onclick="closeAIHelpModal()">Close</button>
      <button class="btn btn-primary" onclick="submitAIHelp()">Ask</button>
    </div>
    <div id="ai-help-output" class="table-wrapper" style="max-height:280px; overflow:auto; display:none;"></div>
  </div>
</div>


<!-- Product Modal -->
<div id="product-modal" class="modal-overlay hidden" aria-hidden="true">
  <div class="modal-content" role="dialog" aria-labelledby="product-modal-title">
    <button class="modal-close-btn" onclick="closeProductModal()" aria-label="Close">‚úï</button>
    <h2 id="product-modal-title">Add Product</h2>
    <form id="product-form">
      <input type="hidden" id="product-id">

      <div class="form-row">
        <div class="form-group">
          <label for="product-name">Product Name</label>
          <input id="product-name" class="form-input" type="text" placeholder="e.g., Premium Tee" required>
        </div>
        <div class="form-group">
          <label for="product-sku">SKU</label>
          <input id="product-sku" class="form-input" type="text" placeholder="e.g., TEE-PRM-BLK-S" required>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="product-stock">Stock</label>
          <input id="product-stock" class="form-input" type="number" min="0" placeholder="0" required>
        </div>
        <div class="form-group">
          <label for="product-price">Price ($)</label>
          <input id="product-price" class="form-input" type="number" min="0" step="0.01" placeholder="0.00" required>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="product-status">Status</label>
          <select id="product-status" class="form-input">
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>
        </div>
        <div class="form-group">
          <label for="product-threshold">Low Stock Threshold</label>
          <input id="product-threshold" class="form-input" type="number" min="0" placeholder="5">
        </div>
      </div>

      <div class="form-row">
        <div class="form-group" style="flex:1;">
          <label for="product-category">Category</label>
          <input id="product-category" class="form-input" type="text" placeholder="e.g., Apparel">
        </div>
        <div class="form-group" id="product-group-packaging" style="flex:1;">
          <label for="product-packaging">Packaging</label>
          <select id="product-packaging" class="form-input">
            <option value="">‚Äî Select packaging ‚Äî</option>
          </select>
        </div>
      </div>

      <div class="form-group" id="product-group-materials">
        <label for="product-materials">Materials</label>
        <select id="product-materials" class="form-input" multiple size="4" title="Hold Ctrl/Command to multi-select">
        </select>
        <small style="color: var(--text-secondary);">Choose the materials required to make this product.</small>
      </div>

      <div class="form-group">
        <label for="product-description">Description</label>
        <textarea id="product-description" class="form-input" rows="3" placeholder="Short description..."></textarea>
      </div>

      <div class="form-actions">
        <button type="button" class="btn btn-secondary" onclick="closeProductModal()">Cancel</button>
        <button type="submit" class="btn btn-primary">
          <span class="btn-text">Save</span>
          <span class="spinner" aria-hidden="true"></span>
        </button>
      </div>
    </form>
  </div>
 </div>

<!-- Material Modal -->
<div id="material-modal" class="modal-overlay hidden" aria-hidden="true">
  <div class="modal-content" role="dialog" aria-labelledby="material-modal-title">
    <button class="modal-close-btn" onclick="closeMaterialModal()" aria-label="Close">‚úï</button>
    <h2 id="material-modal-title">Add Material</h2>
    <form id="material-form">
      <input type="hidden" id="material-id">
      <div class="form-row">
        <div class="form-group">
          <label for="material-name">Material Name</label>
          <input id="material-name" class="form-input" type="text" placeholder="e.g., DTF Film Sheets" required>
        </div>
        <div class="form-group">
          <label for="material-sku">SKU</label>
          <input id="material-sku" class="form-input" type="text" placeholder="e.g., MAT-DTF-FILM" required>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label for="material-stock">Stock</label>
          <input id="material-stock" class="form-input" type="number" min="0" placeholder="0" required>
        </div>
        <div class="form-group">
          <label for="material-price">Cost ($)</label>
          <input id="material-price" class="form-input" type="number" min="0" step="0.01" placeholder="0.00" required>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label for="material-status">Status</label>
          <select id="material-status" class="form-input">
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>
        </div>
        <div class="form-group">
          <label for="material-threshold">Low Stock Threshold</label>
          <input id="material-threshold" class="form-input" type="number" min="0" placeholder="5">
        </div>
      </div>
      <div class="form-group">
        <label for="material-description">Description</label>
        <textarea id="material-description" class="form-input" rows="3" placeholder="Short description..."></textarea>
      </div>
      <div class="form-actions">
        <button type="button" class="btn btn-secondary" onclick="closeMaterialModal()">Cancel</button>
        <button type="submit" class="btn btn-primary">
          <span class="btn-text">Save</span>
          <span class="spinner" aria-hidden="true"></span>
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Packing Material Modal -->
<div id="packing-modal" class="modal-overlay hidden" aria-hidden="true">
  <div class="modal-content" role="dialog" aria-labelledby="packing-modal-title">
    <button class="modal-close-btn" onclick="closePackingModal()" aria-label="Close">‚úï</button>
    <h2 id="packing-modal-title">Add Packing Material</h2>
    <form id="packing-form">
      <input type="hidden" id="packing-id">
      <div class="form-row">
        <div class="form-group">
          <label for="packing-name">Item Name</label>
          <input id="packing-name" class="form-input" type="text" placeholder="e.g., 6x9 Poly Mailer" required>
        </div>
        <div class="form-group">
          <label for="packing-sku">SKU</label>
          <input id="packing-sku" class="form-input" type="text" placeholder="e.g., PKG-POLY-6X9" required>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label for="packing-stock">Stock</label>
          <input id="packing-stock" class="form-input" type="number" min="0" placeholder="0" required>
        </div>
        <div class="form-group">
          <label for="packing-price">Cost ($)</label>
          <input id="packing-price" class="form-input" type="number" min="0" step="0.01" placeholder="0.00" required>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label for="packing-status">Status</label>
          <select id="packing-status" class="form-input">
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>
        </div>
        <div class="form-group">
          <label for="packing-threshold">Low Stock Threshold</label>
          <input id="packing-threshold" class="form-input" type="number" min="0" placeholder="5">
        </div>
      </div>
      <div class="form-group">
        <label for="packing-description">Description</label>
        <textarea id="packing-description" class="form-input" rows="3" placeholder="Short description..."></textarea>
      </div>
      <div class="form-actions">
        <button type="button" class="btn btn-secondary" onclick="closePackingModal()">Cancel</button>
        <button type="submit" class="btn btn-primary">
          <span class="btn-text">Save</span>
          <span class="spinner" aria-hidden="true"></span>
        </button>
      </div>
    </form>
  </div>
</div>

<script>
(() => {
  const state = { items: [], mode: 'add', activeTab: 'products', stockFilter: 'all', previewRows: [] };
  // Product modal elements
  const productModal = document.getElementById('product-modal');
  const productForm = document.getElementById('product-form');
  // Material modal elements
  const materialModal = document.getElementById('material-modal');
  const materialForm = document.getElementById('material-form');
  // Packing modal elements
  const packingModal = document.getElementById('packing-modal');
  const packingForm = document.getElementById('packing-form');
  // Spreadsheet modal elements
  const spreadsheetModal = document.getElementById('spreadsheet-modal');
  const spreadsheetFile = document.getElementById('spreadsheet-file');
  const spreadsheetPreview = document.getElementById('spreadsheet-preview');
  const spreadsheetImportBtn = document.getElementById('spreadsheet-import-btn');
  const mappingSummary = document.getElementById('mapping-summary');
  // AI Help modal
  const aiHelpModal = document.getElementById('ai-help-modal');

  function $(id) { return document.getElementById(id); }

  // Helpers to detect category types
  const isMaterialsCat = (c) => /^(materials|raw\s*materials?)$/i.test(String(c||''));
  const isPackingCat = (c) => /^packing\s*materials?$/i.test(String(c||''));
  // Product-only dependent fields handled by separate modal; materials/packing have no product relations

  // Compute low/out-of-stock alerts
  function computeInventoryAlerts(items, defaultThreshold = 5) {
    const low = [];
    const out = [];
    (items || []).forEach(it => {
      const stock = Number(it?.stock ?? 0) || 0;
      const threshold = it?.threshold != null ? Number(it.threshold) || 0 : defaultThreshold;
      const row = { id: it.id, name: it.name, sku: it.sku, stock, threshold, category: it.category };
      if (stock <= 0) out.push(row);
      else if (stock <= threshold) low.push(row);
    });
    return { low, out };
  }

  // Render alerts UI and update overview metrics
  function renderAlerts() {
    const container = document.getElementById('inv-alerts');
    if (!container) return;
    const { low, out } = computeInventoryAlerts(state.items, 5);

    // Update overview metrics if present
    const elTotal = document.getElementById('metric-total-skus'); if (elTotal) elTotal.textContent = String(state.items.length || 0);
    const elLow = document.getElementById('metric-low-stock'); if (elLow) elLow.textContent = String(low.length || 0);
    const elOut = document.getElementById('metric-out-of-stock'); if (elOut) elOut.textContent = String(out.length || 0);

    if ((low.length + out.length) === 0) {
      container.innerHTML = '<div class="empty-state-small"><p>No alerts right now.</p></div>';
      return;
    }
    const listItem = (it, icon) => `<li>${icon} <strong>${it.name || 'Unnamed'}</strong> (${it.sku || 'N/A'}) ‚Äî stock: ${it.stock}${it.threshold != null ? ` (threshold: ${it.threshold})` : ''}</li>`;
    const outHtml = out.length ? `
      <div class="status error" style="margin-bottom:.5rem;"><strong>${out.length}</strong> item(s) out of stock</div>
      <ul class="list-unstyled" style="margin-bottom:1rem;">
        ${out.slice(0,8).map(it => listItem(it, '‚ùå')).join('')}
      </ul>
    ` : '';
    const lowHtml = low.length ? `
      <div class="status warning" style="margin-bottom:.5rem;"><strong>${low.length}</strong> item(s) low on stock</div>
      <ul class="list-unstyled">
        ${low.slice(0,8).map(it => listItem(it, '‚ö†Ô∏è')).join('')}
      </ul>
    ` : '';
    container.innerHTML = outHtml + lowHtml;
  }

  // Tab + filter controls
  window.setActiveTab = function(tab) {
    state.activeTab = tab;
    document.getElementById('products-panel').style.display = tab === 'products' ? 'block' : 'none';
    document.getElementById('materials-panel').style.display = tab === 'materials' ? 'block' : 'none';
    document.getElementById('packing-panel').style.display = tab === 'packing' ? 'block' : 'none';
    ['products','materials','packing'].forEach(t => {
      const btn = document.getElementById(`tab-${t}`);
      if (btn) btn.classList.toggle('active', t === tab);
    });
    renderList();
  }

  window.setFilter = function(kind) {
    state.stockFilter = kind; // 'all' | 'low' | 'out'
    renderList();
  }


  function resetProductForm() {
    $('product-id').value = '';
    $('product-name').value = '';
    $('product-sku').value = '';
    $('product-stock').value = '';
    $('product-price').value = '';
    $('product-status').value = 'active';
    $('product-threshold').value = '';
    $('product-category').value = '';
    $('product-description').value = '';
    $('product-materials').innerHTML = '';
    $('product-packaging').value = '';
  }
  function resetMaterialForm() {
    $('material-id').value = '';
    $('material-name').value = '';
    $('material-sku').value = '';
    $('material-stock').value = '';
    $('material-price').value = '';
    $('material-status').value = 'active';
    $('material-threshold').value = '';
    $('material-description').value = '';
  }
  function resetPackingForm() {
    $('packing-id').value = '';
    $('packing-name').value = '';
    $('packing-sku').value = '';
    $('packing-stock').value = '';
    $('packing-price').value = '';
    $('packing-status').value = 'active';
    $('packing-threshold').value = '';
    $('packing-description').value = '';
  }

  function fillProductForm(item) {
    $('product-id').value = item.id;
    $('product-name').value = item.name || '';
    $('product-sku').value = item.sku || '';
    $('product-stock').value = item.stock ?? '';
    $('product-price').value = item.price ?? '';
    $('product-status').value = item.status || 'active';
    $('product-threshold').value = item.threshold ?? '';
    $('product-category').value = item.category || '';
    $('product-description').value = item.description || '';
    const mats = Array.isArray(item.materials) ? item.materials : [];
    Array.from($('product-materials').options).forEach(opt => { opt.selected = mats.includes(opt.value); });
    $('product-packaging').value = item.packagingId || '';
  }
  function fillMaterialForm(item) {
    $('material-id').value = item.id;
    $('material-name').value = item.name || '';
    $('material-sku').value = item.sku || '';
    $('material-stock').value = item.stock ?? '';
    $('material-price').value = item.price ?? '';
    $('material-status').value = item.status || 'active';
    $('material-threshold').value = item.threshold ?? '';
    $('material-description').value = item.description || '';
  }
  function fillPackingForm(item) {
    $('packing-id').value = item.id;
    $('packing-name').value = item.name || '';
    $('packing-sku').value = item.sku || '';
    $('packing-stock').value = item.stock ?? '';
    $('packing-price').value = item.price ?? '';
    $('packing-status').value = item.status || 'active';
    $('packing-threshold').value = item.threshold ?? '';
    $('packing-description').value = item.description || '';
  }

  function renderList() {
    const emptyEl = $('inventory-empty');
    const listEl = $('inventory-list');
    const tbody = $('inventory-tbody');

    if (!state.items.length) {
      emptyEl.style.display = 'block';
      listEl.style.display = 'none';
      return;
    }

    emptyEl.style.display = 'none';
    listEl.style.display = 'block';

    const q = (document.getElementById('inventory-search')?.value || '').toLowerCase();
    const renderRows = (arr) => arr.map(item => `
      <tr>
        <td>${item.name}</td>
        <td>${item.sku}</td>
        <td>${item.stock}</td>
        <td>$${Number(item.price).toFixed(2)}</td>
        <td><span class="status-badge ${item.status === 'active' ? 'status-new' : 'status-completed'}">${item.status}</span></td>
        <td class="actions-cell">
          <button class="btn btn-secondary" onclick="editInventoryItem('${item.id}')">Edit</button>
          <button class="btn" style="background:#fee2e2; color:#991b1b; border-color:#fecaca;" onclick="deleteInventoryItem('${item.id}')">Delete</button>
        </td>
      </tr>
    `).join('');

    // Filter products: exclude Materials and Packing Materials from the main Products table
    let products = state.items.filter(i => !(isMaterialsCat(i.category) || isPackingCat(i.category)));
    if (q) products = products.filter(p => (p.name||'').toLowerCase().includes(q) || (p.sku||'').toLowerCase().includes(q) || (p.category||'').toLowerCase().includes(q));
    if (state.stockFilter === 'low' || state.stockFilter === 'out'){
      const { low, out } = computeInventoryAlerts(products, 5);
      const ids = new Set((state.stockFilter==='low'?low:out).map(x => x.id));
      products = products.filter(p => ids.has(p.id));
    }

    // Full list shows products
    tbody.innerHTML = renderRows(products);

    // Grouped: Materials and Packing Materials
  let materials = state.items.filter(i => isMaterialsCat(i.category));
  if (q) materials = materials.filter(p => (p.name||'').toLowerCase().includes(q) || (p.sku||'').toLowerCase().includes(q));
    const packing = state.items.filter(i => isPackingCat(i.category));

    const mEmpty = $('materials-empty');
    const mList = $('materials-list');
    const mBody = $('materials-tbody');
    if (!materials.length) { mEmpty.style.display = 'block'; mList.style.display = 'none'; }
    else { mEmpty.style.display = 'none'; mList.style.display = 'block'; mBody.innerHTML = renderRows(materials); }

    const pEmpty = $('packing-empty');
    const pList = $('packing-list');
    const pBody = $('packing-tbody');
    if (!packing.length) { pEmpty.style.display = 'block'; pList.style.display = 'none'; }
    else { pEmpty.style.display = 'none'; pList.style.display = 'block'; pBody.innerHTML = renderRows(packing); }
  }

  window.openProductModal = function(mode = 'add', itemId = null) {
    state.mode = mode;
    resetProductForm();
    document.getElementById('product-modal-title').textContent = mode === 'add' ? 'Add Product' : 'Edit Product';
    if (mode === 'edit' && itemId) {
      const item = state.items.find(i => i.id === itemId);
      if (item) {
        populateRelationships();
        fillProductForm(item);
      }
    } else {
      populateRelationships();
    }
    productModal.classList.remove('hidden');
    document.body.classList.add('no-scroll');
    productModal.setAttribute('aria-hidden', 'false');
  }

  window.openMaterialModal = function(mode = 'add', itemId = null) {
    state.mode = mode;
    resetMaterialForm();
    document.getElementById('material-modal-title').textContent = mode === 'add' ? 'Add Material' : 'Edit Material';
    if (mode === 'edit' && itemId) {
      const item = state.items.find(i => i.id === itemId);
      if (item) fillMaterialForm(item);
    }
    materialModal.classList.remove('hidden');
    document.body.classList.add('no-scroll');
    materialModal.setAttribute('aria-hidden', 'false');
  }

  window.openPackingModal = function(mode = 'add', itemId = null) {
    state.mode = mode;
    resetPackingForm();
    document.getElementById('packing-modal-title').textContent = mode === 'add' ? 'Add Packing Material' : 'Edit Packing Material';
    if (mode === 'edit' && itemId) {
      const item = state.items.find(i => i.id === itemId);
      if (item) fillPackingForm(item);
    }
    packingModal.classList.remove('hidden');
    document.body.classList.add('no-scroll');
    packingModal.setAttribute('aria-hidden', 'false');
  }

  // Close helpers
  window.closeProductModal = function() {
    productModal.classList.add('hidden');
    document.body.classList.remove('no-scroll');
    productModal.setAttribute('aria-hidden', 'true');
  }
  window.closeMaterialModal = function() {
    materialModal.classList.add('hidden');
    document.body.classList.remove('no-scroll');
    materialModal.setAttribute('aria-hidden', 'true');
  }
  window.closePackingModal = function() {
    packingModal.classList.add('hidden');
    document.body.classList.remove('no-scroll');
    packingModal.setAttribute('aria-hidden', 'true');
  }

  // Spreadsheet modal helpers
  window.openSpreadsheetModal = function(){
    spreadsheetModal.classList.remove('hidden');
    spreadsheetModal.setAttribute('aria-hidden','false');
    document.body.classList.add('no-scroll');
    spreadsheetPreview.style.display = 'none';
    spreadsheetPreview.innerHTML = '';
    spreadsheetImportBtn.disabled = true;
    mappingSummary.textContent = '';
    if (spreadsheetFile) spreadsheetFile.value = '';
  }
  window.closeSpreadsheetModal = function(){
    spreadsheetModal.classList.add('hidden');
    spreadsheetModal.setAttribute('aria-hidden','true');
    document.body.classList.remove('no-scroll');
  }

  function autoMapHeaders(headers){
    const map = {};
    const norm = (s) => String(s||'').toLowerCase().replace(/[^a-z0-9]+/g,'');
    const aliases = {
      name:['name','product','title'],
      sku:['sku','id','code'],
      price:['price','cost','unitprice'],
      stock:['stock','qty','quantity'],
      category:['category','type','group'],
      threshold:['threshold','lowstock','min','reorder'],
      description:['description','desc','details']
    };
    headers.forEach((h,i)=>{
      const n = norm(h);
      for (const key of Object.keys(aliases)){
        if (aliases[key].some(a => n === norm(a))) { map[key] = i; break; }
      }
    });
    return map;
  }

  function renderPreview(rows){
    if (!rows.length) { spreadsheetPreview.style.display='none'; spreadsheetPreview.innerHTML=''; return; }
    const headers = rows[0];
    const body = rows.slice(1, 21);
    const thead = `<thead><tr>${headers.map(h=>`<th>${String(h)}</th>`).join('')}</tr></thead>`;
    const tbody = `<tbody>${body.map(r=>`<tr>${r.map(c=>`<td>${c==null?'':String(c)}</td>`).join('')}</tr>`).join('')}</tbody>`;
    spreadsheetPreview.innerHTML = `<table>${thead}${tbody}</table>`;
    spreadsheetPreview.style.display = 'block';
  }

  if (spreadsheetFile){
    spreadsheetFile.addEventListener('change', async (e)=>{
      const file = e.target.files && e.target.files[0];
      if (!file) return;
      const ext = (file.name.split('.').pop()||'').toLowerCase();
      const buf = await file.arrayBuffer();
      let rows = [];
      if (ext === 'csv'){
        const text = new TextDecoder().decode(new Uint8Array(buf));
        rows = text.split(/\r?\n/).map(l=>l.split(','));
      } else {
        if (typeof XLSX === 'undefined') { window.showToast && window.showToast('XLSX not loaded','error'); return; }
        const wb = XLSX.read(buf, { type:'array' });
        const ws = wb.Sheets[wb.SheetNames[0]];
        rows = XLSX.utils.sheet_to_json(ws, { header: 1 });
      }
      rows = rows.filter(r => r && r.length && r.some(c => String(c||'').trim() !== ''));
      if (!rows.length){ window.showToast && window.showToast('No data found','error'); return; }
      state.previewRows = rows;
      const headers = rows[0].map(h=>String(h||''));
      const map = autoMapHeaders(headers);
      const mapped = Object.keys(map).length ? Object.keys(map).join(', ') : 'none';
      mappingSummary.textContent = `Mapped columns: ${mapped}`;
      renderPreview(rows);
      spreadsheetImportBtn.disabled = false;
    });
  }

  window.importSpreadsheet = async function(){
    try{
      const rows = state.previewRows || [];
      if (!rows.length) return;
      const headers = rows[0].map(h=>String(h||''));
      const map = autoMapHeaders(headers);
      const body = rows.slice(1).map(r=>{
        const pick = (k, def='') => {
          const idx = map[k];
          return idx!=null ? r[idx] : def;
        };
        return {
          name: String(pick('name','')).trim(),
          sku: String(pick('sku','')).trim(),
          price: Number(pick('price',0))||0,
          stock: Number(pick('stock',0))||0,
          category: String(pick('category','')).trim(),
          threshold: Number(pick('threshold',0))||0,
          description: String(pick('description','')).trim(),
          status: 'active',
          materials: [],
          packagingId: ''
        };
      }).filter(x => x.name && x.sku);
      if (!body.length){ window.showToast && window.showToast('No valid rows to import','error'); return; }
      // Import sequentially to keep it simple
      let ok = 0; let fail = 0;
      for (const item of body){
        try{
          const res = await fetch('/inventory/api', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(item) });
          if (!res.ok) throw new Error('failed');
          const created = await res.json();
          state.items.unshift(created);
          ok++;
        }catch(e){ fail++; }
      }
      renderList(); populateRelationships(); renderAlerts();
      window.showToast && window.showToast(`Imported ${ok} item(s); ${fail} failed`, fail? 'warning':'success');
      closeSpreadsheetModal();
    }catch(e){ console.error(e); window.showToast && window.showToast('Import failed','error'); }
  }

  // AI Help modal helpers
  window.openAIHelpModal = function(){ aiHelpModal.classList.remove('hidden'); aiHelpModal.setAttribute('aria-hidden','false'); document.body.classList.add('no-scroll'); }
  window.closeAIHelpModal = function(){ aiHelpModal.classList.add('hidden'); aiHelpModal.setAttribute('aria-hidden','true'); document.body.classList.remove('no-scroll'); }
  window.submitAIHelp = async function(){
    const input = document.getElementById('ai-help-input');
    const out = document.getElementById('ai-help-output');
    const q = (input?.value||'').trim(); if (!q) return;
    try{
      const res = await fetch('/ai/co-pilot', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ message: q, channel: 'inventory' }) });
      const data = await res.json();
      const text = (data && (data.text||data.message||data.answer)) || JSON.stringify(data);
      out.style.display = 'block';
      out.innerHTML = `<pre style="white-space:pre-wrap;">${text}</pre>`;
    } catch(e){ console.error(e); window.showToast && window.showToast('AI request failed','error'); }
  }

  // Removed legacy closeInventoryModal in favor of type-specific close functions

  window.editInventoryItem = function(id) {
    const item = state.items.find(i => i.id === id);
    if (!item) return;
    if (isMaterialsCat(item.category)) return window.openMaterialModal('edit', id);
    if (isPackingCat(item.category)) return window.openPackingModal('edit', id);
    return window.openProductModal('edit', id);
  }

  window.deleteInventoryItem = async function(id) {
    try {
      const res = await fetch(`/inventory/api/${id}`, { method: 'DELETE' });
      if (!res.ok) throw new Error('Delete failed');
  state.items = state.items.filter(i => i.id !== id);
  renderList();
  populateRelationships();
  renderAlerts();
  if (window.showToast) window.showToast('Deleted', 'info');
    } catch (e) {
      console.error(e);
      if (window.showToast) window.showToast('Failed to delete item', 'error');
    }
  }

  // Product form submit
  productForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    productForm.setAttribute('data-loading', 'true');

    const payload = {
      name: $('product-name').value.trim(),
      sku: $('product-sku').value.trim(),
      stock: Number($('product-stock').value || 0),
      price: Number($('product-price').value || 0),
      status: $('product-status').value,
      threshold: Number($('product-threshold').value || 0),
      category: $('product-category').value.trim(),
      description: $('product-description').value.trim(),
      materials: Array.from($('product-materials').selectedOptions).map(o => o.value),
      packagingId: $('product-packaging').value
    };

    // Enforce separation: Materials and Packing shouldn't carry product relationships
    // For products, relationships are allowed

    if (!payload.name || !payload.sku) {
      productForm.removeAttribute('data-loading');
      if (window.showToast) window.showToast('Name and SKU are required', 'error');
      return;
    }

    try {
      if (state.mode === 'add' && !$('product-id').value) {
        const res = await fetch('/inventory/api', {
          method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload)
        });
        if (!res.ok) throw new Error('Create failed');
        const created = await res.json();
        state.items.unshift(created);
        if (window.showToast) window.showToast('Saved', 'success');
      } else {
        const id = $('product-id').value;
        const res = await fetch(`/inventory/api/${id}`, {
          method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload)
        });
        if (!res.ok) throw new Error('Update failed');
        const idx = state.items.findIndex(i => i.id === id);
        if (idx !== -1) state.items[idx] = { id, ...payload };
        if (window.showToast) window.showToast('Saved', 'success');
      }
      renderList();
      populateRelationships();
  renderAlerts();
      window.closeProductModal();
    } catch (err) {
      console.error(err);
      if (window.showToast) window.showToast('Save failed', 'error');
    } finally {
      productForm.removeAttribute('data-loading');
    }
  });

  // Material form submit
  materialForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    materialForm.setAttribute('data-loading', 'true');
    const payload = {
      name: $('material-name').value.trim(),
      sku: $('material-sku').value.trim(),
      stock: Number($('material-stock').value || 0),
      price: Number($('material-price').value || 0),
      status: $('material-status').value,
      threshold: Number($('material-threshold').value || 0),
      category: 'Materials',
      description: $('material-description').value.trim(),
      materials: [],
      packagingId: ''
    };
    if (!payload.name || !payload.sku) {
      materialForm.removeAttribute('data-loading');
      if (window.showToast) window.showToast('Name and SKU are required', 'error');
      return;
    }
    try {
      if (state.mode === 'add' && !$('material-id').value) {
        const res = await fetch('/inventory/api', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
        if (!res.ok) throw new Error('Create failed');
        const created = await res.json();
        state.items.unshift(created);
        if (window.showToast) window.showToast('Saved', 'success');
      } else {
        const id = $('material-id').value;
        const res = await fetch(`/inventory/api/${id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
        if (!res.ok) throw new Error('Update failed');
        const idx = state.items.findIndex(i => i.id === id);
        if (idx !== -1) state.items[idx] = { id, ...payload };
        if (window.showToast) window.showToast('Saved', 'success');
      }
      renderList();
      populateRelationships();
  renderAlerts();
      window.closeMaterialModal();
    } catch (err) {
      console.error(err);
      if (window.showToast) window.showToast('Save failed', 'error');
    } finally {
      materialForm.removeAttribute('data-loading');
    }
  });

  // Packing form submit
  packingForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    packingForm.setAttribute('data-loading', 'true');
    const payload = {
      name: $('packing-name').value.trim(),
      sku: $('packing-sku').value.trim(),
      stock: Number($('packing-stock').value || 0),
      price: Number($('packing-price').value || 0),
      status: $('packing-status').value,
      threshold: Number($('packing-threshold').value || 0),
      category: 'Packing Materials',
      description: $('packing-description').value.trim(),
      materials: [],
      packagingId: ''
    };
    if (!payload.name || !payload.sku) {
      packingForm.removeAttribute('data-loading');
      if (window.showToast) window.showToast('Name and SKU are required', 'error');
      return;
    }
    try {
      if (state.mode === 'add' && !$('packing-id').value) {
        const res = await fetch('/inventory/api', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
        if (!res.ok) throw new Error('Create failed');
        const created = await res.json();
        state.items.unshift(created);
        if (window.showToast) window.showToast('Saved', 'success');
      } else {
        const id = $('packing-id').value;
        const res = await fetch(`/inventory/api/${id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
        if (!res.ok) throw new Error('Update failed');
        const idx = state.items.findIndex(i => i.id === id);
        if (idx !== -1) state.items[idx] = { id, ...payload };
        if (window.showToast) window.showToast('Saved', 'success');
      }
      renderList();
      populateRelationships();
  renderAlerts();
      window.closePackingModal();
    } catch (err) {
      console.error(err);
      if (window.showToast) window.showToast('Save failed', 'error');
    } finally {
      packingForm.removeAttribute('data-loading');
    }
  });

  // Close on overlay click or Escape
  [productModal, materialModal, packingModal, spreadsheetModal, aiHelpModal].forEach(mdl => {
    mdl.addEventListener('click', (e) => { if (e.target === mdl) mdl.querySelector('.modal-close-btn').click(); });
  });
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      if (!productModal.classList.contains('hidden')) closeProductModal();
      if (!materialModal.classList.contains('hidden')) closeMaterialModal();
      if (!packingModal.classList.contains('hidden')) closePackingModal();
      if (!spreadsheetModal.classList.contains('hidden')) closeSpreadsheetModal();
      if (!aiHelpModal.classList.contains('hidden')) closeAIHelpModal();
    }
  });

  // Populate materials and packaging dropdowns based on current inventory list
  function populateRelationships() {
    const matsSel = $('product-materials');
    const pkgSel = $('product-packaging');
    const isMaterials = (c) => /^(materials|raw\s*materials?)$/i.test(String(c||''));
    const isPacking = (c) => /^packing\s*materials?$/i.test(String(c||''));
    const materials = state.items.filter(i => isMaterials(i.category));
    const packing = state.items.filter(i => isPacking(i.category));
    matsSel.innerHTML = materials.map(m => `<option value="${m.id}">${m.name} (${m.sku})</option>`).join('');
    pkgSel.innerHTML = `<option value="">‚Äî Select packaging ‚Äî</option>` + packing.map(p => `<option value="${p.id}">${p.name} (${p.sku})</option>`).join('');
  }

  async function loadItems() {
    try {
      const res = await fetch('/inventory/api');
      if (!res.ok) throw new Error('Failed to load inventory');
      state.items = await res.json();
      renderList();
      populateRelationships();
  renderAlerts();
    } catch (e) {
      console.error(e);
      if (window.showToast) window.showToast('Failed to load inventory', 'error');
    }
  }

  loadItems();
})();
</script>
